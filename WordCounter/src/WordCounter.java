import java.util.Arrays;
import java.util.Comparator;

import components.map.Map;
import components.map.Map1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * From a specified input text file, a table filled with words and the amount
 * they are mentioned and output to a specified output location given by the
 * use.
 *
 * @author Ephratah Meskel
 *
 */
public final class WordCounter {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private WordCounter() {
    }

    /**
     *
     *
     * @param input
     *            the input stream
     * @param m
     *            words --> amount of times they've appeared
     * @param separatorSet
     *            a set filled with characters that are considered separators
     * @updates m
     * @requires input is a valid text file, |input| > 0
     * @ensures for m, k--> words, v--> counts
     */
    private static void getWordsCounts(SimpleReader input,
            Map<String, Integer> m, Set<Character> separatorSet) {

        String currentLine;

        while (!input.atEOS()) {
            currentLine = input.nextLine();
            int position = 0;

            while (position < currentLine.length()) {
                String token = nextWordOrSeparator(currentLine, position,
                        separatorSet);
                char c = token.charAt(0);
                if (!separatorSet.contains(c)) {
                    if (m.hasKey(token)) {
                        int num = m.value(token) + 1;
                        m.remove(token);
                        m.add(token, num);
                    } else {
                        m.add(token, 1);
                    }
                }
                position += token.length();
            }
        }

    }

    /**
     * prints out a table filled with words and their counts to the output.
     *
     * @param map
     *            words -> counts
     * @param out
     *            the output stream
     * @updates out.content
     * @ensures out.content = #out.content * [a table with the amount of words
     *          that are in map along with their counts]
     */
    private static void endingHTML(Map<String, Integer> map, SimpleWriter out) {
        String[] tempArray = new String[map.size()];
        int i = 0;
        for (Map.Pair<String, Integer> tempPair : map) {
            String tempStr = tempPair.key();
            tempArray[i++] = tempStr;
        }
        Arrays.sort(tempArray, new Comparator<String>() {

            @Override
            public int compare(String o1, String o2) {
                return o1.compareToIgnoreCase(o2);
            }

        });
        for (String tempStr : tempArray) {
            int num = map.value(tempStr);
            out.println("<tr>");
            out.println("<td>" + tempStr + "</td>");
            out.println("<td>" + num + "</td>");
            out.println("</tr>");
        }

        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * @param out
     *            the output stream
     * @param fileIn
     *            the input stream
     * @updates out.content
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void startingHTML(SimpleWriter out, String fileIn) {
        out.println("<!DOCTYPE html>");
        out.println("<html lang=\'en\'>");
        out.println("<title>Words Counted in ");
        out.print(fileIn);
        out.print("</title>");
        out.println("</head>");
        out.println("<body>");
        out.println("<h2>Words Counted in");
        out.print(fileIn);
        out.println("</h2>");
        out.println("<hr>");
        out.println("<table border='1'>");
        out.println("<tr>");
        out.println("<th>Words</th>");
        out.println("<th>Counts</th>");
        out.println("</tr>");

    }

    /**
     * Returns the first "word" (maximal length string of characters not in
     * {@code separators}) or "separator string" (maximal length string of
     * characters in {@code separators}) in the given {@code text} starting at
     * the given {@code position}.
     *
     * @param text
     *            the {@code String} from which to get the word or separator
     *            string
     * @param position
     *            the starting index
     * @param separators
     *            the {@code Set} of separator characters
     * @return the first word or separator string found in {@code text} starting
     *         at index {@code position}
     * @requires 0 <= position < |text|
     * @ensures <pre>
     * nextWordOrSeparator =
     *   text[position, position + |nextWordOrSeparator|)  and
     * if entries(text[position, position + 1)) intersection separators = {}
     * then
     *   entries(nextWordOrSeparator) intersection separators = {}  and
     *   (position + |nextWordOrSeparator| = |text|  or
     *    entries(text[position, position + |nextWordOrSeparator| + 1))
     *      intersection separators /= {})
     * else
     *   entries(nextWordOrSeparator) is subset of separators  and
     *   (position + |nextWordOrSeparator| = |text|  or
     *    entries(text[position, position + |nextWordOrSeparator| + 1))
     *      is not subset of separators)
     * </pre>
     */
    private static String nextWordOrSeparator(String text, int position,
            Set<Character> separators) {
        assert text != null : "Violation of: text is not null";
        assert separators != null : "Violation of: separators is not null";
        assert 0 <= position : "Violation of: 0 <= position";
        assert position < text.length() : "Violation of: position < |text|";

        StringBuilder result = new StringBuilder();
        boolean hasSep = true;
        char startChar = text.charAt(position);

        if (separators.contains(startChar)) {
            for (int i = position; i < text.length() && hasSep; i++) {
                if (separators.contains(text.charAt(i))) {
                    char temp = text.charAt(i);
                    result.append(temp);
                } else {
                    hasSep = false;
                }
            }
        } else {
            hasSep = false;
            for (int i = position; i < text.length() && !hasSep; i++) {
                if (!separators.contains(text.charAt(i))) {
                    char temp = text.charAt(i);
                    result.append(temp);
                } else {
                    hasSep = true;
                }
            }

        }
        return result.toString();
    }

    /**
     * Generates the set of characters in the given {@code String} into the
     * given {@code Set}.
     *
     * @param str
     *            the given {@code String}
     * @param charSet
     *            the {@code Set} to be replaced
     * @replaces charSet
     * @ensures charSet = entries(str)
     */
    public static void generateElements(String str, Set<Character> charSet) {
        assert str != null : "Violation of: str is not null";
        assert charSet != null : "Violation of: charSet is not null";

        int size = str.length();
        for (int i = 0; i < size; i++) {
            char tempStr = str.charAt(i);
            if (!charSet.contains(tempStr)) {
                charSet.add(tempStr);
            }

        }
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments
     */
    public static void main(String[] args) {
        SimpleWriter out = new SimpleWriter1L();
        SimpleReader in = new SimpleReader1L();
        out.println(
                "Enter a valid file location for the file you would like to use:");
        String fileInLocation = in.nextLine();
        out.println(
                "Enter a valid folder for where you would like the output to be:");
        String fileOutLocation = in.nextLine();

        String ext = "wordbank.html";

        final String separatorStr = " ,?;:!-.";
        Set<Character> separatorSet = new Set1L<>();
        Map<String, Integer> map = new Map1L<>();
        generateElements(separatorStr, separatorSet);

        SimpleReader textInput = new SimpleReader1L(fileInLocation);
        SimpleWriter textOutput = new SimpleWriter1L(
                fileOutLocation + "/" + ext);

        getWordsCounts(textInput, map, separatorSet);
        startingHTML(textOutput, fileInLocation);
        endingHTML(map, textOutput);
        in.close();
        out.close();
    }

}
