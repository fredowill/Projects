import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Ephratah Meskel
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * All of of the individual prints are the HTML tags and the everything
         * need for the header but in a way thats easier for me to understand
         */
        int num = getChildElement(channel, "title");
        out.print("<html> <head> <title>");
        if (channel.child(num).numberOfChildren() == 0) {
            out.print("No Title");
        } else {
            out.print(channel.child(num).child(0).label());
        }
        out.print("</title>");
        out.println("</head>");
        out.print("<body>");

        num = getChildElement(channel, "link");
        out.println("<h1>");
        out.print("<a href = ");
        out.print("'");
        out.print(channel.child(num).child(0).label());
        out.print("'");
        out.print(">");
        num = getChildElement(channel, "title");

        out.print(channel.child(num).child(0).label());
        out.print("</a></h1>");

        out.println("<p>");
        num = getChildElement(channel, "description");
        if (channel.child(num).numberOfChildren() == 0) {
            out.print("No Description");
        } else {
            out.print(channel.child(num).child(0).label());
        }

        /* This is the rest of the opening HTML tags to start the table */

        out.println("     </p>\r\n" + "     <table border=\"1\">\r\n"
                + "     <tr>\r\n" + "     <th>Date</th>\r\n"
                + "     <th>Source</th>\r\n" + "     <th>News</th>\r\n"
                + "     </tr>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";
        int ret = -1;

        /*
         * finds the index of the child of the root, if there is none ret
         * returns -1
         */

        for (int i = 0; i < xml.numberOfChildren(); i++) {
            if (xml.child(i).isTag()) {
                if (xml.child(i).label().equals(tag)) {
                    ret = i;
                }
            }
        }
        return ret;

    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * I got all the indexies of the tags I need using the getChildElement
         * static method
         */
        out.println("<tr>");
        int getTitle = getChildElement(item, "title");
        int getLink = getChildElement(item, "link");
        int getDescription = getChildElement(item, "description");
        int date = getChildElement(item, "pubDate");
        int source = getChildElement(item, "source");

        /*
         * put the date, then source, then title and link in order of the
         * example. each of the if statements check that getChildelement didn't
         * return -1 and that it isn't blank and either outputs that it's not
         * available or the label of it.
         */
        if (date != -1) {
            if (item.child(date).child(0).label().equals(" ")) {
                out.println("<td> No date avaliable </td>");
            } else {
                out.println(
                        "<td>" + item.child(date).child(0).label() + "</td>");
            }
        }

        if (source != -1) {
            if (item.child(source).child(0).label().equals("")) {
                out.println("<td> No source avaliable </td>");
            } else {
                out.println("<td> <a href='"
                        + item.child(source).attributeValue("url") + "'>  "
                        + item.child(source).child(0).label() + "</a></td>");
            }
        }

        /*
         * I print out the link if there is one first in the html <a href = ...>
         * tag
         */
        if (getLink != -1 && !item.child(getLink).child(0).label().equals("")) {
            out.print("<td>");
            out.print("<a href = ");
            out.print("'");
            out.print(item.child(getLink).child(0).label());
            out.print("'");
            out.print(">");
        } else {
            out.print("<td>");
        }
        /*
         * there could be or not be a link, either way the title or description
         * will print to the screen as part of the <a>...<a> tag
         */
        if (getTitle != -1) {
            if (item.child(getTitle).child(0).label().equals("")) {
                out.print("No title available");
            } else {
                out.print(item.child(getTitle).child(0).label());
            }
        } else if (getDescription != -1) {
            if (item.child(getDescription).child(0).label().equals("")) {
                out.print("No description available");
            } else {
                out.print(item.child(getDescription).child(0).label());
            }
        }
        out.print("</a></td>");
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.print("Enter the URL of an RSS 2.0 news feed: ");
        String url = in.nextLine();

        XMLTree xml = new XMLTree1(url);

        if (xml.label().equals("rss") && xml.hasAttribute("version")
                && xml.attributeValue("version").equals("2.0")) {

            XMLTree channel = xml.child(0);

            out.println(
                    "Enter a name for the file you want the HTML to print to");

            String fileName = in.nextLine();

            SimpleWriter fileOut = new SimpleWriter1L(fileName);

            outputHeader(channel, fileOut);

            for (int i = 0; i < channel.numberOfChildren(); i++) {
                if (channel.child(i).isTag()) {
                    if (channel.child(i).label().equals("item")) {
                        XMLTree item = channel.child(i);
                        processItem(item, fileOut);
                    }
                }
            }
            outputFooter(fileOut);
            fileOut.close();
        } else {
            out.println("That is an invalid url for an RSS 2.0 file ");
        }
        in.close();
        out.close();
    }

}
